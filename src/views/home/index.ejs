<section class="content">
  <div class="row g-3">
    <!-- Phòng đang bật -->
    <div class="col-lg-3 col-6">
      <div class="small-box text-bg-primary">
        <div class="inner">
          <h3><%= (stat && stat.activeCount) || 0 %></h3>
          <p>Phòng đang bật</p>
        </div>
        <a href="<%= firstActiveLink %>" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
          Chi tiết <i class="bi bi-link-45deg"></i>
        </a>
      </div>
    </div>

    <!-- Thiết bị online -->
    <div class="col-lg-3 col-6">
      <div class="small-box text-bg-success">
        <div class="inner">
          <h3><%= (stat && stat.devicesOnline) || 0 %></h3>
          <p>Thiết bị online</p>
        </div>
        <a href="/devices" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
          Thiết bị <i class="bi bi-link-45deg"></i>
        </a>
      </div>
    </div>

    <!-- Lượt bật hôm nay -->
    <div class="col-lg-3 col-6">
      <div class="small-box text-bg-warning">
        <div class="inner">
          <h3><%= (stat && stat.onToday) || 0 %></h3>
          <p>Lượt bật hôm nay</p>
        </div>
        <span class="small-box-footer link-dark link-underline-opacity-0 link-underline-opacity-50-hover">
          Cập nhật realtime
        </span>
      </div>
    </div>

    <!-- Tổng số phòng -->
    <div class="col-lg-3 col-6">
      <div class="small-box text-bg-danger">
        <div class="inner">
          <h3><%= (stat && stat.roomsTotal) || 0 %></h3>
          <p>Tổng số phòng</p>
        </div>
        <a href="/campuses" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
          Tới sơ đồ <i class="bi bi-link-45deg"></i>
        </a>
      </div>
    </div>
  </div>

  <div class="row g-3">
    <!-- Biểu đồ -->
    <div class="col-12 col-lg-7">
      <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h3 class="card-title mb-0"><i class="bi bi-activity me-1"></i> Biểu đồ phút sử dụng (7 ngày)</h3>
        </div>
        <div class="card-body">
          <canvas id="usageChart" height="110"></canvas>
        </div>
      </div>
    </div>

    <!-- Danh sách phòng đang bật -->
    <div class="col-12 col-lg-5">
      <div class="card shadow-sm">
        <div class="card-header">
          <h3 class="card-title mb-0"><i class="bi bi-lightbulb me-1"></i> Phòng đang bật</h3>
        </div>
        <div class="card-body p-0">
          <table class="table table-hover align-middle mb-0">
            <thead class="table-light">
              <tr>
                <th>Mã phòng</th>
                <th>Tên</th>
                <th>Bật từ</th>
                <th class="text-end">Thao tác</th>
              </tr>
            </thead>
            <tbody id="active-rooms-body">
              <% if (!activeRooms || !activeRooms.length) { %>
                <tr><td colspan="4" class="text-center text-muted py-4">Tất cả phòng đều tắt.</td></tr>
              <% } else { %>
                <% activeRooms.forEach(r => { %>
                  <tr data-room="<%= r._id %>">
                    <td>
                      <a href="<%= r.__link %>" class="text-decoration-none">
                        <span class="badge bg-primary-subtle text-primary border"><%= r.code %></span>
                      </a>
                    </td>
                    <td><a href="<%= r.__link %>" class="link-underline-opacity-0"><%= r.name || '—' %></a></td>
                    <td>
                      <small class="text-muted"
                             data-start="<%= (r.lastOnAt || r.updatedAt || r.createdAt)?.toISOString ? (r.lastOnAt || r.updatedAt || r.createdAt).toISOString() : '' %>">
                        Đang tính...
                      </small>
                    </td>
                    <td class="text-end">
                      <form class="d-inline" method="post" action="/rooms/<%= r._id %>/toggle-state">
                        <input type="hidden" name="state" value="false">
                        <input type="hidden" name="returnTo" value="<%= currentUrl || '/' %>">
                        <button class="btn btn-sm btn-outline-danger">
                          <i class="bi bi-power"></i> Tắt
                        </button>
                      </form>
                    </td>
                  </tr>
                <% }) %>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>

      <div class="small text-muted mt-2">
        * “Bật từ” tính theo mốc thay đổi trạng thái gần nhất (real-time nếu có socket.io).
      </div>
    </div>
  </div>
</section>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
<!-- Socket.io (nếu có) -->
<script src="/socket.io/socket.io.js"></script>

<!-- NHÚNG DỮ LIỆU BIỂU ĐỒ DẠNG JSON AN TOÀN -->
<script type="application/json" id="chart-data">
  <%- JSON.stringify(chartData || { labels: [], minutes: [] }) %>
</script>

<script>
  // 1) Vẽ biểu đồ từ JSON an toàn
  (function () {
    const dataEl = document.getElementById('chart-data');
    let chartDataSafe = { labels: [], minutes: [] };
    if (dataEl && dataEl.textContent.trim()) {
      try { chartDataSafe = JSON.parse(dataEl.textContent); } catch (e) {}
    }
    const labels  = Array.isArray(chartDataSafe.labels)  ? chartDataSafe.labels  : [];
    const minutes = Array.isArray(chartDataSafe.minutes) ? chartDataSafe.minutes : [];

    const ctx = document.getElementById('usageChart');
    if (!ctx) return;
    const allZero = minutes.every(v => v === 0);
    new Chart(ctx, {
      type: 'line',
      data: {
        labels,
        datasets: [{
          label: 'Sử dụng (phút)',
          data: minutes,
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          fill: true,
          tension: 0.3,
          pointRadius: 3,
          pointHitRadius: 10
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false, // cho phép cao 110px hiển thị tốt
        scales: {
          y: {
            beginAtZero: true,
            suggestedMax: allZero ? 10 : undefined, // nếu chưa có dữ liệu, set max=10 cho nhìn thấy
            ticks: { stepSize: 2 }
          },
          x: {
            grid: { display: false }
          }
        },
        plugins: {
          legend: { display: true },
          tooltip: { mode: 'index', intersect: false }
        }
      }
    });
  })();

  // 2) Hiển thị “Bật từ … trước”
  function timeago(ts) {
    if (!ts) return '—';
    const d = new Date(ts);
    const diff = Math.max(0, Date.now() - d.getTime());
    const m = Math.floor(diff / 60000), h = Math.floor(m / 60);
    if (h > 0) return `${h} giờ ${m % 60} phút trước`;
    if (m > 0) return `${m} phút trước`;
    const s = Math.floor(diff / 1000);
    return `${s} giây trước`;
  }
  function refreshStartTexts() {
    document.querySelectorAll('[data-start]').forEach(el => {
      el.textContent = timeago(el.getAttribute('data-start'));
    });
  }
  refreshStartTexts();
  setInterval(refreshStartTexts, 10000);

  // 3) Realtime (tùy chọn – nếu server có io)
  const socket = typeof io !== 'undefined' ? io() : null;
  if (socket) {
    socket.on('room:state', payload => {
      const tbody = document.getElementById('active-rooms-body');
      const tr = document.querySelector(`tr[data-room="${payload.roomId}"]`);

      if (payload.isOn) {
        if (!tr) {
          const row = document.createElement('tr');
          row.setAttribute('data-room', payload.roomId);
          row.innerHTML = `
            <td><span class="badge bg-primary-subtle text-primary border">${payload.code || ''}</span></td>
            <td>${payload.name || '—'}</td>
            <td><small class="text-muted" data-start="${payload.lastOnAt || new Date().toISOString()}">vừa bật</small></td>
            <td class="text-end">
              <form class="d-inline" method="post" action="/rooms/${payload.roomId}/toggle-state">
                <input type="hidden" name="state" value="false">
                <input type="hidden" name="returnTo" value="<%= currentUrl || '/' %>">
                <button class="btn btn-sm btn-outline-danger"><i class="bi bi-power"></i> Tắt</button>
              </form>
            </td>`;
          tbody.querySelector('.text-center')?.remove();
          tbody.prepend(row);
        } else {
          const t = tr.querySelector('[data-start]');
          if (t) t.setAttribute('data-start', payload.lastOnAt || new Date().toISOString());
        }
      } else {
        if (tr) tr.remove();
        if (!tbody.querySelector('tr')) {
          const empty = document.createElement('tr');
          empty.innerHTML = `<td colspan="4" class="text-center text-muted py-4">Tất cả phòng đều tắt.</td>`;
          tbody.appendChild(empty);
        }
      }
      refreshStartTexts();
    });

    socket.on('log:new', lg => {
      if (lg.state === 'on') {
        const el = document.querySelector('.small-box.text-bg-warning h3');
        if (el) el.textContent = String(Number(el.textContent || 0) + 1);
      }
    });
  }
</script>
